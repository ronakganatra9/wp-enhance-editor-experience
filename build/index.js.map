{"version":3,"file":"index.js","mappings":"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","sources":["webpack:///external window \"React\"","webpack:///external window [\"wp\",\"apiFetch\"]","webpack:///external window [\"wp\",\"components\"]","webpack:///external window [\"wp\",\"domReady\"]","webpack:///external window [\"wp\",\"element\"]","webpack:///webpack/bootstrap","webpack:///webpack/runtime/compat get default export","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./src/index.js"],"sourcesContent":["module.exports = window[\"React\"];","module.exports = window[\"wp\"][\"apiFetch\"];","module.exports = window[\"wp\"][\"components\"];","module.exports = window[\"wp\"][\"domReady\"];","module.exports = window[\"wp\"][\"element\"];","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { createRoot,useState, useEffect } from '@wordpress/element';\nimport domReady from '@wordpress/dom-ready';\nimport { __experimentalHeading as Heading, Panel, PanelBody, PanelRow, ToggleControl, TextControl, SelectControl } from '@wordpress/components';\nimport apiFetch from '@wordpress/api-fetch';\n\nfunction SettingsApp() {\n    const [settings, setSettings] = useState(null);\n    const [isSaving, setIsSaving] = useState(false);\n\n    useEffect(() => {\n        apiFetch({ path: '/block-editor-settings/v1/settings' })\n            .then(response => setSettings(response));\n    }, []);\n\n    const updateSettings = async (newSettings) => {\n        setIsSaving(true);\n        try {\n            const response = await apiFetch({\n                path: '/block-editor-settings/v1/settings',\n                method: 'POST',\n                data: newSettings\n            });\n            setSettings(response);\n        } catch (error) {\n            console.error('Failed to save settings:', error);\n        }\n        setIsSaving(false);\n    };\n\n    if (!settings) return <div>Loading...</div>;\n\n    return (\n        <>\n            <Heading level={1}>\n                Block Editor Settings\n            </Heading>\n            <Panel>\n                <PanelBody>\n                    <PanelRow>\n                        <ToggleControl\n                            label=\"Disable Pattern Directory\"\n                            checked={settings.disable_patterns}\n                            onChange={(value) => updateSettings({ ...settings, disable_patterns: value })}\n                        />\n                    </PanelRow>\n                    <PanelRow>\n                        <ToggleControl\n                            label=\"Disable Template Editor\"\n                            checked={settings.disable_template_editor}\n                            onChange={(value) => updateSettings({ ...settings, disable_template_editor: value })}\n                        />\n                    </PanelRow>\n                    <PanelRow>\n                        <ToggleControl\n                            label=\"Disable Code Editor\"\n                            checked={settings.disable_code_editor}\n                            onChange={(value) => updateSettings({ ...settings, disable_code_editor: value })}\n                        />\n                    </PanelRow>\n                    <PanelRow>\n                        <TextControl\n                            label=\"Max Upload File Size (bytes)\"\n                            type=\"number\"\n                            value={settings.max_upload_size}\n                            onChange={(value) => updateSettings({ ...settings, max_upload_size: parseInt(value) })}\n                        />\n                    </PanelRow>\n                    <PanelRow>\n                        <SelectControl\n                            label=\"Default Image Size\"\n                            value={settings.default_image_size}\n                            options={[\n                                { label: 'Thumbnail', value: 'thumbnail' },\n                                { label: 'Medium', value: 'medium' },\n                                { label: 'Large', value: 'large' },\n                                { label: 'Full Size', value: 'full' }\n                            ]}\n                            onChange={(value) => updateSettings({ ...settings, default_image_size: value })}\n                        />\n                    </PanelRow>\n                    <PanelRow>\n                        <ToggleControl\n                            label=\"Disable Openverse\"\n                            checked={settings.disable_openverse}\n                            onChange={(value) => updateSettings({ ...settings, disable_openverse: value })}\n                        />\n                    </PanelRow>\n                    <PanelRow>\n                        <ToggleControl\n                            label=\"Disable Font Library\"\n                            checked={settings.disable_font_library}\n                            onChange={(value) => updateSettings({ ...settings, disable_font_library: value })}\n                        />\n                    </PanelRow>\n                    <PanelRow>\n                        <ToggleControl\n                            label=\"Disable Inspector Tabs\"\n                            checked={settings.disable_inspector_tabs}\n                            onChange={(value) => updateSettings({ ...settings, disable_inspector_tabs: value })}\n                        />\n                    </PanelRow>\n                    <PanelRow>\n                        <ToggleControl\n                            label=\"Disable Block Directory\"\n                            checked={settings.disable_block_directory}\n                            onChange={(value) => updateSettings({ ...settings, disable_block_directory: value })}\n                        />\n                    </PanelRow>\n                    <PanelRow>\n                        <ToggleControl\n                            label=\"Disable Remote Patterns\"\n                            checked={settings.disable_remote_patterns}\n                            onChange={(value) => updateSettings({ ...settings, disable_remote_patterns: value })}\n                        />\n                    </PanelRow>\n                </PanelBody>\n                {isSaving && <div>Saving...</div>}\n            </Panel>\n        </>\n    );\n}\n\ndomReady( () => {\n    const root = createRoot(\n        document.getElementById( 'block-editor-settings-app' )\n    );\n\n    root.render( <SettingsApp /> );\n} );"],"names":["createRoot","useState","useEffect","domReady","__experimentalHeading","Heading","Panel","PanelBody","PanelRow","ToggleControl","TextControl","SelectControl","apiFetch","SettingsApp","settings","setSettings","isSaving","setIsSaving","path","then","response","updateSettings","newSettings","method","data","error","console","createElement","Fragment","level","label","checked","disable_patterns","onChange","value","disable_template_editor","disable_code_editor","type","max_upload_size","parseInt","default_image_size","options","disable_openverse","disable_font_library","disable_inspector_tabs","disable_block_directory","disable_remote_patterns","root","document","getElementById","render"],"sourceRoot":""}